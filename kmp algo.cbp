#include <iostream>
#include <string.h>
using namespace std;

void computeLPSArray(char *pat, int M, int lps[]){
    //length of the previous longest prefix suffix
    int len = 0;
    lps[0] = 0; //lps[0] is always 0

    //the loop will calculate the lps[i] for i = 1 to M-1
    int i = 1;
    while ( i < M ){
        if ( pat[i] == pat[len] ){
            len ++;
            lps[i] = len;
            i ++;
        } else {
        //pat[i] != pat[len]
        //this is tricky :)
        if ( len != 0 ){
            len = lps[len-1];
            //i is not incremented here
        } else {
        //if len == 0;
        lps[i] = 0;
        i ++;
        }
        }
    }

}

void KMPSearch(char *pat, char *txt){
    int M = strlen(pat);
    int N = strlen(txt);
    //create lps[] that will hold the longest prefix suffix
    //value for pattern
    int lps[M];
    //preprocess the pattern - calculatethe lps array
    computeLPSArray(pat, M, lps);

    int i = 0; //index for txt
    int j = 0; //index for pat
    while ( i < N ){
        if (pat[j] == txt[i]){
            j ++;
            i ++;
        }
        if ( j == M ){
            cout << "Found pattern at index " << i-j <<"\n";
            j = lps[j-1];
        }

        //mismatch after j matches
        else if ( i < N && pat[j] != txt[i] ){
            //do not match lps[0..lps[j-1]] characters,
            //they will match anyway
            if ( j!=0 ){
                j = lps[j-1];
            } else i = i + 1;
        }
    }
}

int main()
{
    char *txt = "ABABDABACDABABCABAB";
    char *pat = "ABA";
    KMPSearch(pat, txt);

    return 0;
}
